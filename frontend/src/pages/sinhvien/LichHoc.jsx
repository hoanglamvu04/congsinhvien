import React, { useEffect, useState, useMemo } from "react";
import axios from "axios";
import {
  FaCalendarAlt,
  FaFileExcel,
  FaFilePdf,
  FaChevronLeft,
  FaChevronRight,
} from "react-icons/fa";
import {
  format,
  startOfWeek,
  endOfWeek,
  addWeeks,
  subWeeks,
  eachWeekOfInterval,
} from "date-fns";
import { vi } from "date-fns/locale";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import * as XLSX from "xlsx";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import pdfMake from "../../utils/pdfFonts";

import "../../styles/LichHoc.css";

const API_URL = process.env.REACT_APP_API_URL || "http://localhost:5000";

const tietToCa = (tietBatDau) => {
  if (tietBatDau <= 5) return "S√°ng";
  if (tietBatDau <= 10) return "Chi·ªÅu";
  return "T·ªëi";
};

const LichHoc = () => {
  const [tab, setTab] = useState("tuan"); // "hocKy" | "tuan"
  const [lichHoc, setLichHoc] = useState([]);
  const [hocKyList, setHocKyList] = useState([]);
  const [hocKy, setHocKy] = useState("tatca");
  const [monList, setMonList] = useState([]);
  const [mon, setMon] = useState("tatca");
  const [weekList, setWeekList] = useState([]);
  const [tuan, setTuan] = useState(null);
  const token = localStorage.getItem("token");

  // üìò L·∫•y d·ªØ li·ªáu l·ªãch h·ªçc
  useEffect(() => {
    const fetchData = async () => {
      try {
        const res = await axios.get(`${API_URL}/api/thoi-khoa-bieu/sinhvien`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        const data = res.data.data || [];
        setLichHoc(data);

        const ky = [...new Set(data.map((d) => d.hoc_ky).filter(Boolean))];
        const mon = [...new Set(data.map((d) => d.ten_mon).filter(Boolean))];
        setHocKyList(ky);
        setMonList(mon);

        if (data.length > 0) {
          const minDate = new Date(Math.min(...data.map((i) => new Date(i.ngay_hoc))));
          const maxDate = new Date(Math.max(...data.map((i) => new Date(i.ngay_hoc))));
          const weeks = eachWeekOfInterval({ start: minDate, end: maxDate }, { weekStartsOn: 1 });
          const list = weeks.map((start, idx) => {
            const end = endOfWeek(start, { weekStartsOn: 1 });
            return {
              label: `Tu·∫ßn ${idx + 1} (${format(start, "dd/MM")} - ${format(end, "dd/MM")})`,
              start,
              end,
            };
          });
          setWeekList(list);
          setTuan(list[0]);
        }
      } catch (err) {
        console.error(err);
        toast.error("‚ùå Kh√¥ng th·ªÉ t·∫£i th·ªùi kh√≥a bi·ªÉu!");
      }
    };
    fetchData();
  }, [token]);

  // üßÆ L·ªçc d·ªØ li·ªáu theo h·ªçc k·ª≥ v√† m√¥n
  const filtered = useMemo(() => {
    let data = lichHoc;
    if (hocKy !== "tatca") data = data.filter((i) => i.hoc_ky === hocKy);
    if (mon !== "tatca") data = data.filter((i) => i.ten_mon === mon);
    if (tab === "tuan" && tuan) {
      data = data.filter((i) => {
        const d = new Date(i.ngay_hoc);
        return d >= tuan.start && d <= tuan.end;
      });
    }
    return data;
  }, [lichHoc, hocKy, mon, tuan, tab]);

  // üß≠ ƒêi·ªÅu h∆∞·ªõng tu·∫ßn
  const prevWeek = () => {
    const idx = weekList.findIndex((w) => w.start.getTime() === tuan.start.getTime());
    if (idx > 0) setTuan(weekList[idx - 1]);
  };
  const nextWeek = () => {
    const idx = weekList.findIndex((w) => w.start.getTime() === tuan.start.getTime());
    if (idx < weekList.length - 1) setTuan(weekList[idx + 1]);
  };

  // üßæ Xu·∫•t Excel / PDF
  const exportExcel = () => {
    const ws = XLSX.utils.json_to_sheet(
      filtered.map((i) => ({
        "Ng√†y h·ªçc": format(new Date(i.ngay_hoc), "dd/MM/yyyy"),
        "Th·ª©": i.thu_trong_tuan,
        "Ca": tietToCa(i.tiet_bat_dau),
        "M√¥n h·ªçc": i.ten_mon,
        "Gi·∫£ng vi√™n": i.ten_giang_vien,
        "Ph√≤ng": i.phong_hoc,
        "L·ªõp HP": i.ma_lop_hp,
        "Tr·∫°ng th√°i": i.trang_thai,
      }))
    );
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "LichHoc");
    XLSX.writeFile(wb, "lich_hoc.xlsx");
  };
const exportPDF = () => {
  try {
    const tableBody = [
      [
        { text: "Ng√†y", bold: true },
        { text: "Th·ª©", bold: true },
        { text: "Ca", bold: true },
        { text: "M√¥n h·ªçc", bold: true },
        { text: "Gi·∫£ng vi√™n", bold: true },
        { text: "Ph√≤ng", bold: true },
        { text: "L·ªõp HP", bold: true },
        { text: "Tr·∫°ng th√°i", bold: true },
      ],
      ...filtered.map((i) => [
        format(new Date(i.ngay_hoc), "dd/MM/yyyy"),
        i.thu_trong_tuan,
        tietToCa(i.tiet_bat_dau),
        i.ten_mon,
        i.ten_giang_vien,
        i.phong_hoc,
        i.ma_lop_hp,
        i.trang_thai,
      ]),
    ];

    const docDefinition = {
      content: [
        { text: "L·ªäCH H·ªåC SINH VI√äN", style: "header" },
        {
          table: {
            headerRows: 1,
            widths: ["auto", "auto", "auto", "*", "*", "auto", "auto", "auto"],
            body: tableBody,
          },
          layout: "lightHorizontalLines",
        },
      ],
      styles: {
        header: {
          fontSize: 16,
          bold: true,
          alignment: "center",
          margin: [0, 0, 0, 10],
        },
      },
      defaultStyle: {
        font: "Roboto", // font m·∫∑c ƒë·ªãnh pdfmake c√≥ s·∫µn
        fontSize: 11,
      },
    };

    pdfMake.createPdf(docDefinition).download("lich_hoc.pdf");
  } catch (err) {
    console.error("‚ùå Xu·∫•t PDF l·ªói:", err);
    toast.error("Kh√¥ng th·ªÉ xu·∫•t PDF!");
  }
};
  return (
    <div className="page-container">
      <ToastContainer position="top-center" autoClose={2000} />
      <h2 className="lichhoc-title">
        <FaCalendarAlt style={{ color: "#007bff", marginRight: 8 }} />
        L·ªãch h·ªçc sinh vi√™n
      </h2>

      {/* Tab chuy·ªÉn ƒë·ªïi */}
      <div className="tab-switch">
        <button
          className={tab === "hocKy" ? "active" : ""}
          onClick={() => setTab("hocKy")}
        >
          L·ªäCH H·ªåC D·ª∞ KI·∫æN THEO H·ªåC K·ª≤
        </button>
        <button className={tab === "tuan" ? "active" : ""} onClick={() => setTab("tuan")}>
          L·ªäCH H·ªåC ƒê√É DUY·ªÜT THEO TU·∫¶N
        </button>
      </div>

      {/* B·ªô l·ªçc */}
      <div className="filter-bar">
        <select value={hocKy} onChange={(e) => setHocKy(e.target.value)}>
          <option value="tatca">T·∫•t c·∫£ h·ªçc k·ª≥</option>
          {hocKyList.map((k, i) => (
            <option key={i} value={k}>
              H·ªçc k·ª≥ {k}
            </option>
          ))}
        </select>
        <select value={mon} onChange={(e) => setMon(e.target.value)}>
          <option value="tatca">T·∫•t c·∫£ m√¥n h·ªçc</option>
          {monList.map((m, i) => (
            <option key={i} value={m}>
              {m}
            </option>
          ))}
        </select>
        {tab === "tuan" && (
          <select
            value={tuan ? tuan.label : ""}
            onChange={(e) => {
              const week = weekList.find((w) => w.label === e.target.value);
              if (week) setTuan(week);
            }}
          >
            {weekList.map((w, idx) => (
              <option key={idx} value={w.label}>
                {w.label}
              </option>
            ))}
          </select>
        )}
        <button onClick={exportExcel}>
          <FaFileExcel style={{ color: "green", marginRight: 5 }} />
          Excel
        </button>
        <button onClick={exportPDF}>
          <FaFilePdf style={{ color: "red", marginRight: 5 }} />
          PDF
        </button>
      </div>

      {/* --- L·ªäCH H·ªåC THEO TU·∫¶N (ma tr·∫≠n 3 ca) --- */}
      {tab === "tuan" ? (
        <div className="hocKy-container">
          <div className="week-nav">
            <button onClick={prevWeek}>
              <FaChevronLeft /> Tu·∫ßn tr∆∞·ªõc
            </button>
            <span className="week-label">{tuan?.label}</span>
            <button onClick={nextWeek}>
              Tu·∫ßn sau <FaChevronRight />
            </button>
          </div>

          <table className="hocKy-matrix">
            <thead>
              <tr>
                <th></th>
                <th>Th·ª© 2</th>
                <th>Th·ª© 3</th>
                <th>Th·ª© 4</th>
                <th>Th·ª© 5</th>
                <th>Th·ª© 6</th>
                <th>Th·ª© 7</th>
                <th>CN</th>
              </tr>
            </thead>
            <tbody>
              {["S√°ng", "Chi·ªÅu", "T·ªëi"].map((ca, idx) => (
                <tr key={idx}>
                  <td className={`ca-label ca-${ca.toLowerCase()}`}>{ca}</td>
                  {[2, 3, 4, 5, 6, 7, 8].map((thu, tIndex) => {
                    const buoi = filtered.filter(
                      (i) =>
                        i.thu_trong_tuan === thu &&
                        ca === (i.tiet_bat_dau <= 5
                          ? "S√°ng"
                          : i.tiet_bat_dau <= 10
                            ? "Chi·ªÅu"
                            : "T·ªëi")
                    );
                    return (
                      <td key={tIndex} className={`hocKy-cell ca-${ca.toLowerCase()}`}>
                        {buoi.length > 0 ? (
                          buoi.map((b, j) => (
                            <div key={j} className="hocKy-item">
                              <strong>{b.ten_mon}</strong>
                              <span>Ph√≤ng: {b.phong_hoc || "‚Äî"}</span>
                              <div className="giangvien">GV: {b.ten_giang_vien || "‚Äî"}</div>
                              <div className="tiet">Ti·∫øt: {b.tiet_bat_dau} ‚Äì {b.tiet_ket_thuc}</div>
                            </div>

                          ))
                        ) : (
                          <span className="no-class">‚Äî</span>
                        )}
                      </td>
                    );
                  })}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      ) : (
        // --- L·ªäCH THEO H·ªåC K·ª≤ (gi·ªØ nguy√™n b·∫£ng c≈©) ---
        <table className="schedule-table">
          <thead>
            <tr>
              <th>Ng√†y h·ªçc</th>
              <th>Th·ª©</th>
              <th>Ca</th>
              <th>M√¥n h·ªçc</th>
              <th>Gi·∫£ng vi√™n</th>
              <th>Ph√≤ng</th>
              <th>L·ªõp h·ªçc ph·∫ßn</th>
              <th>Tr·∫°ng th√°i</th>
            </tr>
          </thead>
          <tbody>
            {filtered.length === 0 ? (
              <tr>
                <td colSpan="8" style={{ textAlign: "center" }}>
                  ‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu.
                </td>
              </tr>
            ) : (
              filtered.map((i, idx) => (
                <tr key={idx}>
                  <td>{format(new Date(i.ngay_hoc), "dd/MM/yyyy")}</td>
                  <td>Th·ª© {i.thu_trong_tuan}</td>
                  <td>{tietToCa(i.tiet_bat_dau)}</td>
                  <td>{i.ten_mon}</td>
                  <td>{i.ten_giang_vien}</td>
                  <td>{i.phong_hoc}</td>
                  <td>{i.ma_lop_hp}</td>
                  <td>{i.trang_thai}</td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default LichHoc;

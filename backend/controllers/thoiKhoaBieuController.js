import pool from "../config/db.js";

// üß© H√†m h·ªó tr·ª£ t√≠nh ng√†y h·ªçc theo tu·∫ßn h·ªçc
function getNgayHocTheoTuan(ngayBatDauHocKy, thuTrongTuan, soTuan) {
  // Chuy·ªÉn v·ªÅ ƒë·ªëi t∆∞·ª£ng Date
  const startDate = new Date(ngayBatDauHocKy);
  // D·ªãch sang tu·∫ßn t∆∞∆°ng ·ª©ng (soTuan - 1)
  startDate.setDate(startDate.getDate() + (soTuan - 1) * 7);
  // T√≠nh offset th·ª© (2=Monday ‚Üí offset=0)
  const offset = thuTrongTuan - 2;
  startDate.setDate(startDate.getDate() + offset);
  return startDate.toISOString().slice(0, 10);
}

// üìò Admin xem to√†n b·ªô th·ªùi kh√≥a bi·ªÉu
export const getAllTkb = async (req, res) => {
  try {
    const { keyword } = req.query;
    const search = `%${keyword || ""}%`;
    const [rows] = await pool.query(
      `
      SELECT tkb.*, mh.ten_mon, gv.ho_ten AS ten_giang_vien, lhp.ma_lop_hp
      FROM thoi_khoa_bieu tkb
      LEFT JOIN lop_hoc_phan lhp ON tkb.ma_lop_hp = lhp.ma_lop_hp
      LEFT JOIN mon_hoc mh ON lhp.ma_mon = mh.ma_mon
      LEFT JOIN giang_vien gv ON lhp.ma_giang_vien = gv.ma_giang_vien
      WHERE mh.ten_mon LIKE ? OR gv.ho_ten LIKE ? OR lhp.ma_lop_hp LIKE ? OR tkb.phong_hoc LIKE ?
      ORDER BY tkb.ngay_hoc ASC, tkb.tiet_bat_dau ASC
      `,
      [search, search, search, search]
    );
    res.json({ data: rows });
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y TKB:", error);
    res.status(500).json({ error: "L·ªói khi l·∫•y th·ªùi kh√≥a bi·ªÉu" });
  }
};

// üìò Sinh vi√™n xem l·ªãch h·ªçc c·ªßa ch√≠nh m√¨nh
export const getTkbBySinhVien = async (req, res) => {
  try {
    const userId = req.user.id;
    const [svRows] = await pool.query("SELECT ma_sinh_vien FROM sinh_vien WHERE id_tai_khoan = ?", [userId]);
    if (svRows.length === 0) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y sinh vi√™n." });
    const ma_sinh_vien = svRows[0].ma_sinh_vien;

    const [rows] = await pool.query(
      `
      SELECT bh.*, mh.ten_mon, gv.ho_ten AS ten_giang_vien, lhp.ma_lop_hp
      FROM buoi_hoc bh
      JOIN thoi_khoa_bieu tkb ON tkb.id_tkb = bh.id_tkb
      JOIN lop_hoc_phan lhp ON tkb.ma_lop_hp = lhp.ma_lop_hp
      JOIN mon_hoc mh ON lhp.ma_mon = mh.ma_mon
      JOIN giang_vien gv ON lhp.ma_giang_vien = gv.ma_giang_vien
      JOIN dang_ky_mon dk ON dk.ma_lop_hp = lhp.ma_lop_hp
      WHERE dk.ma_sinh_vien = ?
      ORDER BY bh.ngay_hoc ASC, bh.tiet_bat_dau ASC
      `,
      [ma_sinh_vien]
    );
    res.json({ data: rows });
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y l·ªãch h·ªçc sinh vi√™n:", error);
    res.status(500).json({ error: "L·ªói khi l·∫•y l·ªãch h·ªçc th·ª±c t·∫ø." });
  }
};

// üìò Gi·∫£ng vi√™n xem l·ªãch gi·∫£ng d·∫°y
export const getTkbByGiangVien = async (req, res) => {
  try {
    const userId = req.user.id;
    const [gvRows] = await pool.query("SELECT ma_giang_vien FROM giang_vien WHERE id_tai_khoan = ?", [userId]);
    if (gvRows.length === 0) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y gi·∫£ng vi√™n." });
    const ma_giang_vien = gvRows[0].ma_giang_vien;

    const [rows] = await pool.query(
      `
      SELECT tkb.*, mh.ten_mon, lhp.ma_lop_hp, gv.ho_ten AS ten_giang_vien
      FROM thoi_khoa_bieu tkb
      JOIN lop_hoc_phan lhp ON tkb.ma_lop_hp = lhp.ma_lop_hp
      JOIN mon_hoc mh ON lhp.ma_mon = mh.ma_mon
      JOIN giang_vien gv ON lhp.ma_giang_vien = gv.ma_giang_vien
      WHERE gv.ma_giang_vien = ?
      ORDER BY tkb.ngay_hoc ASC, tkb.tiet_bat_dau ASC
      `,
      [ma_giang_vien]
    );

    res.json({ data: rows });
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y l·ªãch gi·∫£ng d·∫°y:", error);
    res.status(500).json({ error: "L·ªói khi l·∫•y l·ªãch gi·∫£ng d·∫°y c·ªßa gi·∫£ng vi√™n." });
  }
};

// ‚ûï Admin th√™m th·ªùi kh√≥a bi·ªÉu v√† t·ª± sinh bu·ªïi h·ªçc
export const createTkb = async (req, res) => {
  const conn = await pool.getConnection();
  try {
    const {
      ma_lop_hp,
      thu_trong_tuan,
      tiet_bat_dau,
      tiet_ket_thuc,
      phong_hoc,
      trang_thai,
      tuan_bat_dau,
      tuan_ket_thuc,
    } = req.body;

    // üîπ L·∫•y ng√†y b·∫Øt ƒë·∫ßu h·ªçc k·ª≥ qua l·ªõp h·ªçc ph·∫ßn
    const [[info]] = await conn.query(
      `SELECT hk.ngay_bat_dau, hk.ngay_ket_thuc
       FROM lop_hoc_phan lhp
       JOIN hoc_ky hk ON lhp.ma_hoc_ky = hk.ma_hoc_ky
       WHERE lhp.ma_lop_hp = ? LIMIT 1`,
      [ma_lop_hp]
    );

    if (!info) return res.status(400).json({ error: "Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c h·ªçc k·ª≥ c·ªßa l·ªõp h·ªçc ph·∫ßn." });

    // üîπ Ch√®n b·∫£n ghi TKB ch√≠nh
    const [result] = await conn.query(
      `
      INSERT INTO thoi_khoa_bieu 
      (ma_lop_hp, thu_trong_tuan, tiet_bat_dau, tiet_ket_thuc, phong_hoc, trang_thai, tuan_bat_dau, tuan_ket_thuc)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?)
      `,
      [ma_lop_hp, thu_trong_tuan, tiet_bat_dau, tiet_ket_thuc, phong_hoc, trang_thai || "hoc", tuan_bat_dau, tuan_ket_thuc]
    );

    const id_tkb = result.insertId;

    // üîπ Sinh t·ª± ƒë·ªông bu·ªïi h·ªçc theo tu·∫ßn
    for (let tuan = tuan_bat_dau; tuan <= tuan_ket_thuc; tuan++) {
      const ngayHoc = getNgayHocTheoTuan(info.ngay_bat_dau, thu_trong_tuan, tuan);
      await conn.query(
        `
        INSERT INTO buoi_hoc (id_tkb, ma_lop_hp, ngay_hoc, thu_trong_tuan, tiet_bat_dau, tiet_ket_thuc, phong_hoc, tuan_hoc, trang_thai)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, 'chua_hoc')
        `,
        [id_tkb, ma_lop_hp, ngayHoc, thu_trong_tuan, tiet_bat_dau, tiet_ket_thuc, phong_hoc, tuan]
      );
    }

    res.status(201).json({ message: "‚úÖ Th√™m th·ªùi kh√≥a bi·ªÉu v√† sinh bu·ªïi h·ªçc t·ª± ƒë·ªông th√†nh c√¥ng" });
  } catch (error) {
    console.error("‚ùå L·ªói khi th√™m TKB:", error);
    res.status(500).json({ error: "L·ªói khi th√™m th·ªùi kh√≥a bi·ªÉu" });
  } finally {
    conn.release();
  }
};

// ‚úèÔ∏è C·∫≠p nh·∫≠t TKB
export const updateTkb = async (req, res) => {
  try {
    const { id_tkb } = req.params;
    const {
      ma_lop_hp,
      thu_trong_tuan,
      tiet_bat_dau,
      tiet_ket_thuc,
      phong_hoc,
      trang_thai,
      tuan_bat_dau,
      tuan_ket_thuc,
    } = req.body;

    await pool.query(
      `
      UPDATE thoi_khoa_bieu
      SET ma_lop_hp=?, thu_trong_tuan=?, tiet_bat_dau=?, tiet_ket_thuc=?, phong_hoc=?, trang_thai=?, tuan_bat_dau=?, tuan_ket_thuc=?
      WHERE id_tkb=?
      `,
      [ma_lop_hp, thu_trong_tuan, tiet_bat_dau, tiet_ket_thuc, phong_hoc, trang_thai, tuan_bat_dau, tuan_ket_thuc, id_tkb]
    );

    res.json({ message: "‚úÖ C·∫≠p nh·∫≠t th·ªùi kh√≥a bi·ªÉu th√†nh c√¥ng" });
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t TKB:", error);
    res.status(500).json({ error: "L·ªói khi c·∫≠p nh·∫≠t th·ªùi kh√≥a bi·ªÉu" });
  }
};

// üóëÔ∏è X√≥a th·ªùi kh√≥a bi·ªÉu v√† bu·ªïi h·ªçc li√™n quan
export const deleteTkb = async (req, res) => {
  try {
    const { id_tkb } = req.params;
    await pool.query("DELETE FROM buoi_hoc WHERE id_tkb = ?", [id_tkb]);
    await pool.query("DELETE FROM thoi_khoa_bieu WHERE id_tkb = ?", [id_tkb]);
    res.json({ message: "üóëÔ∏è X√≥a th·ªùi kh√≥a bi·ªÉu v√† bu·ªïi h·ªçc th√†nh c√¥ng" });
  } catch (error) {
    console.error("‚ùå L·ªói khi x√≥a TKB:", error);
    res.status(500).json({ error: "L·ªói khi x√≥a th·ªùi kh√≥a bi·ªÉu" });
  }
};
export const regenerateBuoiHoc = async (req, res) => {
  const { id_tkb } = req.params;
  const conn = await pool.getConnection();
  try {
    // üîπ L·∫•y th√¥ng tin th·ªùi kh√≥a bi·ªÉu
    const [[tkb]] = await conn.query(
      `SELECT tkb.*, hk.ngay_bat_dau 
       FROM thoi_khoa_bieu tkb
       JOIN lop_hoc_phan lhp ON tkb.ma_lop_hp = lhp.ma_lop_hp
       JOIN hoc_ky hk ON lhp.ma_hoc_ky = hk.ma_hoc_ky
       WHERE id_tkb=?`,
      [id_tkb]
    );
    if (!tkb) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y TKB." });

    // üîπ X√≥a bu·ªïi c≈©
    await conn.query("DELETE FROM buoi_hoc WHERE id_tkb = ?", [id_tkb]);

    // üîπ Sinh l·∫°i bu·ªïi h·ªçc m·ªõi
    for (let tuan = tkb.tuan_bat_dau; tuan <= tkb.tuan_ket_thuc; tuan++) {
      const ngayHoc = getNgayHocTheoTuan(tkb.ngay_bat_dau, tkb.thu_trong_tuan, tuan);
      await conn.query(
        `INSERT INTO buoi_hoc 
         (id_tkb, ma_lop_hp, ngay_hoc, thu_trong_tuan, tiet_bat_dau, tiet_ket_thuc, phong_hoc, tuan_hoc, trang_thai)
         VALUES (?, ?, ?, ?, ?, ?, ?, ?, 'chua_hoc')`,
        [id_tkb, tkb.ma_lop_hp, ngayHoc, tkb.thu_trong_tuan, tkb.tiet_bat_dau, tkb.tiet_ket_thuc, tkb.phong_hoc, tuan]
      );
    }

    res.json({ message: "üîÅ ƒê√£ t√°i t·∫°o l·∫°i bu·ªïi h·ªçc th√†nh c√¥ng!" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "L·ªói khi t√°i t·∫°o bu·ªïi h·ªçc" });
  } finally {
    conn.release();
  }
};

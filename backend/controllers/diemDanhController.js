import pool from "../config/db.js";

/**
 * üìò L·∫•y danh s√°ch ƒëi·ªÉm danh c·ªßa 1 l·ªõp h·ªçc ph·∫ßn
 * (ch·ªâ gi·∫£ng vi√™n d·∫°y l·ªõp ho·∫∑c admin xem ƒë∆∞·ª£c)
 */
export const getDiemDanhByLopHp = async (req, res) => {
  try {
    const { ma_lop_hp } = req.params;
    const user = req.user;

    // üîí N·∫øu l√† gi·∫£ng vi√™n -> ch·ªâ xem l·ªõp m√¨nh d·∫°y
    if (user.role === "giangvien") {
      const [check] = await pool.query(
        "SELECT 1 FROM lop_hoc_phan WHERE ma_lop_hp=? AND ma_giang_vien=?",
        [ma_lop_hp, user.ma_giang_vien]
      );
      if (!check.length)
        return res
          .status(403)
          .json({ error: "B·∫°n kh√¥ng c√≥ quy·ªÅn xem l·ªõp h·ªçc ph·∫ßn n√†y" });
    }

    const [rows] = await pool.query(
      `
      SELECT dd.*, sv.ho_ten, tkb.ngay_hoc, tkb.tiet_bat_dau, tkb.tiet_ket_thuc
      FROM diem_danh dd
      JOIN sinh_vien sv ON dd.ma_sinh_vien = sv.ma_sinh_vien
      JOIN thoi_khoa_bieu tkb ON dd.id_tkb = tkb.id_tkb
      WHERE dd.ma_lop_hp = ?
      ORDER BY tkb.ngay_hoc ASC, sv.ho_ten ASC
      `,
      [ma_lop_hp]
    );

    res.json({ data: rows });
  } catch (error) {
    console.error("[getDiemDanhByLopHp]", error);
    res.status(500).json({ error: "L·ªói khi l·∫•y danh s√°ch ƒëi·ªÉm danh" });
  }
};

/**
 * ‚ûï Gi·∫£ng vi√™n ƒëi·ªÉm danh (th√™m ho·∫∑c c·∫≠p nh·∫≠t)
 */
export const upsertDiemDanh = async (req, res) => {
  try {
    const user = req.user;
    const ma_giang_vien = user.ma_giang_vien;
    const { ma_lop_hp, id_tkb, ma_sinh_vien, trang_thai, so_tiet_vang, ghi_chu } =
      req.body;

    if (!ma_lop_hp || !id_tkb || !ma_sinh_vien)
      return res.status(400).json({ error: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc" });

    // Ki·ªÉm tra gi·∫£ng vi√™n c√≥ d·∫°y l·ªõp n√†y kh√¥ng
    const [check] = await pool.query(
      "SELECT 1 FROM lop_hoc_phan WHERE ma_lop_hp=? AND ma_giang_vien=?",
      [ma_lop_hp, ma_giang_vien]
    );
    if (!check.length)
      return res.status(403).json({ error: "Kh√¥ng c√≥ quy·ªÅn ƒëi·ªÉm danh l·ªõp n√†y" });

    await pool.query(
      `
      INSERT INTO diem_danh 
      (ma_lop_hp, id_tkb, ma_sinh_vien, ma_giang_vien, trang_thai, so_tiet_vang, ghi_chu)
      VALUES (?, ?, ?, ?, ?, ?, ?)
      ON DUPLICATE KEY UPDATE 
        trang_thai=VALUES(trang_thai),
        so_tiet_vang=VALUES(so_tiet_vang),
        ghi_chu=VALUES(ghi_chu),
        thoi_gian_diem_danh=NOW()
      `,
      [
        ma_lop_hp,
        id_tkb,
        ma_sinh_vien,
        ma_giang_vien,
        trang_thai || "comat",
        so_tiet_vang || 0,
        ghi_chu || null,
      ]
    );

    res.json({ message: "‚úÖ C·∫≠p nh·∫≠t ƒëi·ªÉm danh th√†nh c√¥ng" });
  } catch (error) {
    console.error("[upsertDiemDanh]", error);
    res.status(500).json({ error: "L·ªói khi c·∫≠p nh·∫≠t ƒëi·ªÉm danh" });
  }
};

/**
 * üóëÔ∏è X√≥a b·∫£n ghi ƒëi·ªÉm danh
 */
export const deleteDiemDanh = async (req, res) => {
  try {
    const { id_diem_danh } = req.params;
    await pool.query("DELETE FROM diem_danh WHERE id_diem_danh=?", [id_diem_danh]);
    res.json({ message: "üóëÔ∏è X√≥a ƒëi·ªÉm danh th√†nh c√¥ng" });
  } catch (error) {
    console.error("[deleteDiemDanh]", error);
    res.status(500).json({ error: "L·ªói khi x√≥a ƒëi·ªÉm danh" });
  }
};

/**
 * üìä Th·ªëng k√™ chuy√™n c·∫ßn c·ªßa l·ªõp h·ªçc ph·∫ßn
 */
export const getThongKeChuyenCan = async (req, res) => {
  try {
    const { ma_lop_hp } = req.params;

    const [rows] = await pool.query(
      `
      SELECT 
        dd.ma_sinh_vien,
        sv.ho_ten,
        COUNT(dd.id_diem_danh) AS tong_buoi,
        SUM(
          CASE 
            WHEN dd.trang_thai='comat' THEN 1
            WHEN dd.trang_thai IN ('tre','vesom') THEN 0.5
            WHEN dd.trang_thai='nghicohep' THEN 0.5
            ELSE 0
          END
        ) AS buoi_duoc_tinh,
        ROUND(
          (
            SUM(
              CASE 
                WHEN dd.trang_thai='comat' THEN 1
                WHEN dd.trang_thai IN ('tre','vesom') THEN 0.5
                WHEN dd.trang_thai='nghicohep' THEN 0.5
                ELSE 0
              END
            ) / COUNT(dd.id_diem_danh)
          ) * 100, 1
        ) AS ti_le_chuyen_can
      FROM diem_danh dd
      JOIN sinh_vien sv ON dd.ma_sinh_vien = sv.ma_sinh_vien
      WHERE dd.ma_lop_hp = ?
      GROUP BY dd.ma_sinh_vien, sv.ho_ten
      ORDER BY sv.ho_ten
      `,
      [ma_lop_hp]
    );

    res.json({ data: rows });
  } catch (error) {
    console.error("[getThongKeChuyenCan]", error);
    res.status(500).json({ error: "L·ªói khi th·ªëng k√™ chuy√™n c·∫ßn" });
  }
};

/**
 * üìò L·∫•y l·ªãch ƒëi·ªÉm danh theo bu·ªïi (gi·∫£ng vi√™n xem t·ª´ng ng√†y)
 */
export const getDiemDanhByBuoi = async (req, res) => {
  try {
    const { id_tkb } = req.params;

    const [rows] = await pool.query(
      `
      SELECT dd.*, sv.ho_ten, sv.ma_sinh_vien
      FROM diem_danh dd
      JOIN sinh_vien sv ON dd.ma_sinh_vien = sv.ma_sinh_vien
      WHERE dd.id_tkb = ?
      ORDER BY sv.ho_ten
      `,
      [id_tkb]
    );

    res.json({ data: rows });
  } catch (error) {
    console.error("[getDiemDanhByBuoi]", error);
    res.status(500).json({ error: "L·ªói khi l·∫•y ƒëi·ªÉm danh bu·ªïi h·ªçc" });
  }
};

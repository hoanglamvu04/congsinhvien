import pool from "../config/db.js";

// üìò L·∫•y danh s√°ch h·ªçc k·ª≥ (c√≥ t√¨m ki·∫øm)
export const getAllHocKy = async (req, res) => {
  try {
    const { q = "" } = req.query;
    const keyword = `%${q}%`;
    const [rows] = await pool.query(
      `SELECT * FROM hoc_ky 
       WHERE ma_hoc_ky LIKE ? 
          OR ten_hoc_ky LIKE ? 
          OR nam_hoc LIKE ?`,
      [keyword, keyword, keyword]
    );
    res.json({ data: rows });
  } catch (error) {
    console.error("[getAllHocKy]", error);
    res.status(500).json({ error: "L·ªói khi l·∫•y danh s√°ch h·ªçc k·ª≥" });
  }
};

// ‚ûï Th√™m h·ªçc k·ª≥
export const createHocKy = async (req, res) => {
  try {
    const { ma_hoc_ky, ten_hoc_ky, nam_hoc, da_khoa } = req.body;

    if (!ma_hoc_ky || !ten_hoc_ky || !nam_hoc)
      return res.status(400).json({ error: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc" });

    const [exist] = await pool.query("SELECT 1 FROM hoc_ky WHERE ma_hoc_ky = ?", [ma_hoc_ky]);
    if (exist.length) return res.status(409).json({ error: "M√£ h·ªçc k·ª≥ ƒë√£ t·ªìn t·∫°i" });

    await pool.query(
      `INSERT INTO hoc_ky (ma_hoc_ky, ten_hoc_ky, nam_hoc, da_khoa)
       VALUES (?, ?, ?, ?)`,
      [ma_hoc_ky, ten_hoc_ky, nam_hoc, da_khoa ? 1 : 0]
    );
    res.status(201).json({ message: "Th√™m h·ªçc k·ª≥ th√†nh c√¥ng" });
  } catch (error) {
    console.error("[createHocKy]", error);
    res.status(500).json({ error: "L·ªói khi th√™m h·ªçc k·ª≥" });
  }
};

// ‚úèÔ∏è C·∫≠p nh·∫≠t h·ªçc k·ª≥
export const updateHocKy = async (req, res) => {
  try {
    const { ma_hoc_ky } = req.params;
    const { ten_hoc_ky, nam_hoc, da_khoa } = req.body;

    const [exist] = await pool.query("SELECT * FROM hoc_ky WHERE ma_hoc_ky=?", [ma_hoc_ky]);
    if (!exist.length) return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y h·ªçc k·ª≥" });

    await pool.query(
      `UPDATE hoc_ky 
       SET ten_hoc_ky=?, nam_hoc=?, da_khoa=? 
       WHERE ma_hoc_ky=?`,
      [ten_hoc_ky, nam_hoc, da_khoa ? 1 : 0, ma_hoc_ky]
    );

    res.json({ message: "C·∫≠p nh·∫≠t h·ªçc k·ª≥ th√†nh c√¥ng" });
  } catch (error) {
    console.error("[updateHocKy]", error);
    res.status(500).json({ error: "L·ªói khi c·∫≠p nh·∫≠t h·ªçc k·ª≥" });
  }
};

// üóëÔ∏è X√≥a h·ªçc k·ª≥
export const deleteHocKy = async (req, res) => {
  try {
    const { ma_hoc_ky } = req.params;
    await pool.query("DELETE FROM hoc_ky WHERE ma_hoc_ky=?", [ma_hoc_ky]);
    res.json({ message: "X√≥a h·ªçc k·ª≥ th√†nh c√¥ng" });
  } catch (error) {
    console.error("[deleteHocKy]", error);
    if (error.code === "ER_ROW_IS_REFERENCED_2")
      return res.status(409).json({ error: "Kh√¥ng th·ªÉ x√≥a do d·ªØ li·ªáu li√™n quan" });
    res.status(500).json({ error: "L·ªói khi x√≥a h·ªçc k·ª≥" });
  }
};

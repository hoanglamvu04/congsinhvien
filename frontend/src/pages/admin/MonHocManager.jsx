import React, { useEffect, useState } from "react";
import axios from "axios";
import "../../styles/admin/admin.css";

const API_URL = process.env.REACT_APP_API_URL || "http://localhost:5000";

const MonHocManager = () => {
  const [monHocList, setMonHocList] = useState([]);
  const [khoaList, setKhoaList] = useState([]);
  const [keyword, setKeyword] = useState("");
  const [loading, setLoading] = useState(false);
  const [form, setForm] = useState({
    ma_mon: "",
    ten_mon: "",
    ma_khoa: "",
    loai_mon: "",
    so_tin_chi: "",
    don_gia_tin_chi: "",
    hoc_phan_tien_quyet: "",
    chi_nganh: 0,
    mo_ta: "",
  });
  const [editing, setEditing] = useState(null);
  const token = localStorage.getItem("token");

  // üîÑ L·∫•y danh s√°ch m√¥n h·ªçc
  const fetchMonHoc = async () => {
    try {
      setLoading(true);
      const res = await axios.get(`${API_URL}/api/monhoc`, {
        headers: { Authorization: `Bearer ${token}` },
        params: { q: keyword },
      });
      setMonHocList(res.data.data || res.data);
    } catch (err) {
      alert("L·ªói khi t·∫£i danh s√°ch m√¥n h·ªçc!");
    } finally {
      setLoading(false);
    }
  };

const fetchKhoa = async () => {
  try {
    const res = await axios.get(`${API_URL}/api/khoa`, {
      headers: { Authorization: `Bearer ${token}` },
    });
    // ‚úÖ ƒê·∫£m b·∫£o lu√¥n l√† m·∫£ng
    const data = Array.isArray(res.data) ? res.data : res.data.data || [];
    setKhoaList(data);
  } catch (err) {
    console.error("L·ªói t·∫£i danh s√°ch khoa:", err);
    setKhoaList([]);
  }
};


  useEffect(() => {
    fetchMonHoc();
    fetchKhoa();
  }, [keyword]);

  // ‚ûï Th√™m / S·ª≠a
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!form.ma_mon || !form.ten_mon) return alert("ƒêi·ªÅn ƒë·ªß M√£ v√† T√™n m√¥n h·ªçc!");
    try {
      if (editing) {
        await axios.put(`${API_URL}/api/monhoc/${editing}`, form, {
          headers: { Authorization: `Bearer ${token}` },
        });
        alert("‚úÖ C·∫≠p nh·∫≠t m√¥n h·ªçc th√†nh c√¥ng!");
      } else {
        await axios.post(`${API_URL}/api/monhoc`, form, {
          headers: { Authorization: `Bearer ${token}` },
        });
        alert("‚úÖ Th√™m m√¥n h·ªçc th√†nh c√¥ng!");
      }
      setForm({
        ma_mon: "",
        ten_mon: "",
        ma_khoa: "",
        loai_mon: "",
        so_tin_chi: "",
        don_gia_tin_chi: "",
        hoc_phan_tien_quyet: "",
        chi_nganh: 0,
        mo_ta: "",
      });
      setEditing(null);
      fetchMonHoc();
    } catch (err) {
      alert(err.response?.data?.error || "L·ªói khi l∆∞u m√¥n h·ªçc!");
    }
  };

  // ‚úèÔ∏è S·ª≠a
  const handleEdit = (item) => {
    setEditing(item.ma_mon);
    setForm({ ...item });
  };

  // üóëÔ∏è X√≥a
  const handleDelete = async (ma_mon) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a m√¥n h·ªçc n√†y kh√¥ng?")) return;
    try {
      await axios.delete(`${API_URL}/api/monhoc/${ma_mon}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      alert("‚úÖ ƒê√£ x√≥a m√¥n h·ªçc!");
      fetchMonHoc();
    } catch (err) {
      alert(err.response?.data?.error || "L·ªói khi x√≥a m√¥n h·ªçc!");
    }
  };

  return (
    <div className="admin-dashboard">
      <h1>üìò Qu·∫£n l√Ω m√¥n h·ªçc</h1>

      {/* üîç Thanh t√¨m ki·∫øm */}
      <div className="filter-bar">
        <input
          type="text"
          placeholder="T√¨m m√£, t√™n m√¥n ho·∫∑c khoa..."
          value={keyword}
          onChange={(e) => setKeyword(e.target.value)}
        />
      </div>

      {/* üß© Form th√™m / s·ª≠a */}
      <form className="create-form" onSubmit={handleSubmit}>
        <h3>{editing ? "‚úèÔ∏è S·ª≠a m√¥n h·ªçc" : "‚ûï Th√™m m√¥n h·ªçc m·ªõi"}</h3>
        {!editing && (
          <input
            type="text"
            placeholder="M√£ m√¥n"
            value={form.ma_mon}
            onChange={(e) => setForm({ ...form, ma_mon: e.target.value })}
          />
        )}
        <input
          type="text"
          placeholder="T√™n m√¥n h·ªçc"
          value={form.ten_mon}
          onChange={(e) => setForm({ ...form, ten_mon: e.target.value })}
        />
        <select
          value={form.ma_khoa}
          onChange={(e) => setForm({ ...form, ma_khoa: e.target.value })}
        >
          <option value="">-- Ch·ªçn khoa --</option>
          {khoaList.map((k) => (
            <option key={k.ma_khoa} value={k.ma_khoa}>
              {k.ten_khoa}
            </option>
          ))}
        </select>
        <input
          type="text"
          placeholder="Lo·∫°i m√¥n (b·∫Øt bu·ªôc / t·ª± ch·ªçn)"
          value={form.loai_mon}
          onChange={(e) => setForm({ ...form, loai_mon: e.target.value })}
        />
        <input
          type="number"
          placeholder="S·ªë t√≠n ch·ªâ"
          value={form.so_tin_chi}
          onChange={(e) => setForm({ ...form, so_tin_chi: e.target.value })}
        />
        <input
          type="number"
          placeholder="ƒê∆°n gi√° / t√≠n ch·ªâ"
          value={form.don_gia_tin_chi}
          onChange={(e) => setForm({ ...form, don_gia_tin_chi: e.target.value })}
        />
        <input
          type="text"
          placeholder="H·ªçc ph·∫ßn ti√™n quy·∫øt"
          value={form.hoc_phan_tien_quyet}
          onChange={(e) => setForm({ ...form, hoc_phan_tien_quyet: e.target.value })}
        />
        <select
          value={form.chi_nganh}
          onChange={(e) => setForm({ ...form, chi_nganh: Number(e.target.value) })}
        >
          <option value={0}>Chung</option>
          <option value={1}>Chuy√™n ng√†nh</option>
        </select>
        <input
          type="text"
          placeholder="M√¥ t·∫£"
          value={form.mo_ta}
          onChange={(e) => setForm({ ...form, mo_ta: e.target.value })}
        />
        <button type="submit">{editing ? "üíæ L∆∞u" : "Th√™m"}</button>
        {editing && (
          <button type="button" onClick={() => setEditing(null)}>
            H·ªßy
          </button>
        )}
      </form>

      {/* üìã B·∫£ng danh s√°ch */}
      <div className="table-container">
        {loading ? (
          <p>ƒêang t·∫£i...</p>
        ) : (
          <table className="data-table">
            <thead>
              <tr>
                <th>M√£ m√¥n</th>
                <th>T√™n m√¥n</th>
                <th>Khoa</th>
                <th>S·ªë t√≠n ch·ªâ</th>
                <th>Lo·∫°i m√¥n</th>
                <th>H·ªçc ph·∫ßn ti√™n quy·∫øt</th>
                <th>Chi ng√†nh</th>
                <th>M√¥ t·∫£</th>
                <th>Thao t√°c</th>
              </tr>
            </thead>
            <tbody>
              {monHocList.length === 0 ? (
                <tr>
                  <td colSpan="9">Kh√¥ng c√≥ d·ªØ li·ªáu</td>
                </tr>
              ) : (
                monHocList.map((item) => (
                  <tr key={item.ma_mon}>
                    <td>{item.ma_mon}</td>
                    <td>{item.ten_mon}</td>
                    <td>{item.ten_khoa}</td>
                    <td>{item.so_tin_chi}</td>
                    <td>{item.loai_mon}</td>
                    <td>{item.hoc_phan_tien_quyet || "-"}</td>
                    <td>{item.chi_nganh ? "Chuy√™n ng√†nh" : "Chung"}</td>
                    <td>{item.mo_ta || "-"}</td>
                    <td>
                      <button onClick={() => handleEdit(item)}>‚úèÔ∏è</button>
                      <button onClick={() => handleDelete(item.ma_mon)}>üóëÔ∏è</button>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        )}
      </div>
    </div>
  );
};

export default MonHocManager;

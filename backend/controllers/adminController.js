import pool from "../config/db.js";
import bcrypt from "bcrypt";
import { ghiLog } from "./lichSuHoatDongController.js";

const SALT_ROUNDS = 10;

// üß© T·∫°o t√†i kho·∫£n sinh vi√™n ho·∫∑c gi·∫£ng vi√™n
export const createAccount = async (req, res) => {
  const { ten_dang_nhap, mat_khau, vai_tro } = req.body;
  try {
    const [exist] = await pool.query(
      "SELECT * FROM tai_khoan WHERE ten_dang_nhap = ?",
      [ten_dang_nhap]
    );
    if (exist.length > 0) {
      return res.status(400).json({ message: "T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i" });
    }

    const hash = await bcrypt.hash(mat_khau, SALT_ROUNDS);
    const [result] = await pool.query(
      `INSERT INTO tai_khoan 
        (ten_dang_nhap, mat_khau, vai_tro, trang_thai, ngay_tao, nguoi_tao) 
       VALUES (?, ?, ?, ?, NOW(), ?)`,
      [ten_dang_nhap, hash, vai_tro || "sinhvien", "hoatdong", req.user.id]
    );

    await ghiLog(
      req.user.id,
      `T·∫°o t√†i kho·∫£n m·ªõi (${vai_tro || "sinhvien"}): ${ten_dang_nhap}`,
      "tai_khoan",
      result.insertId
    );

    res.status(201).json({ message: "T·∫°o t√†i kho·∫£n th√†nh c√¥ng" });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "L·ªói server khi t·∫°o t√†i kho·∫£n" });
  }
};

// üßæ L·∫•y danh s√°ch t√†i kho·∫£n (c√≥ th·ªÉ l·ªçc theo vai tr√≤, t·ª´ kh√≥a)
export const getAllAccounts = async (req, res) => {
  const { vai_tro, keyword } = req.query;
  try {
    let sql =
      "SELECT id_tai_khoan, ten_dang_nhap, vai_tro, trang_thai, ngay_tao FROM tai_khoan WHERE 1=1";
    const params = [];

    if (vai_tro) {
      sql += " AND vai_tro = ?";
      params.push(vai_tro);
    }
    if (keyword) {
      sql += " AND ten_dang_nhap LIKE ?";
      params.push(`%${keyword}%`);
    }

    sql += " ORDER BY ngay_tao DESC";

    const [rows] = await pool.query(sql, params);
    res.json(rows);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "L·ªói server khi l·∫•y danh s√°ch t√†i kho·∫£n" });
  }
};

// ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n (vai tr√≤, tr·∫°ng th√°i)
export const updateAccount = async (req, res) => {
  const { id_tai_khoan } = req.params;
  const { vai_tro, trang_thai } = req.body;
  try {
    const [result] = await pool.query(
      "UPDATE tai_khoan SET vai_tro=?, trang_thai=? WHERE id_tai_khoan=?",
      [vai_tro, trang_thai, id_tai_khoan]
    );

    if (result.affectedRows === 0)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n" });

    await ghiLog(
      req.user.id,
      `C·∫≠p nh·∫≠t t√†i kho·∫£n ID=${id_tai_khoan} (vai_tro=${vai_tro}, trang_thai=${trang_thai})`,
      "tai_khoan",
      id_tai_khoan
    );

    res.json({ message: "C·∫≠p nh·∫≠t t√†i kho·∫£n th√†nh c√¥ng" });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "L·ªói server khi c·∫≠p nh·∫≠t t√†i kho·∫£n" });
  }
};

// üîë ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
export const resetPassword = async (req, res) => {
  const { id_tai_khoan } = req.params;
  const { mat_khau_moi } = req.body;
  try {
    const hash = await bcrypt.hash(mat_khau_moi, SALT_ROUNDS);
    const [result] = await pool.query(
      "UPDATE tai_khoan SET mat_khau=? WHERE id_tai_khoan=?",
      [hash, id_tai_khoan]
    );

    if (result.affectedRows === 0)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n" });

    await ghiLog(
      req.user.id,
      `ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n ID=${id_tai_khoan}`,
      "tai_khoan",
      id_tai_khoan
    );

    res.json({ message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng" });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "L·ªói server khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u" });
  }
};

// üóëÔ∏è X√≥a t√†i kho·∫£n
export const deleteAccount = async (req, res) => {
  const { id_tai_khoan } = req.params;
  try {
    const [result] = await pool.query("DELETE FROM tai_khoan WHERE id_tai_khoan = ?", [id_tai_khoan]);
    if (result.affectedRows === 0)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n ƒë·ªÉ x√≥a" });

    await ghiLog(req.user.id, `X√≥a t√†i kho·∫£n ID=${id_tai_khoan}`, "tai_khoan", id_tai_khoan);

    res.json({ message: "X√≥a t√†i kho·∫£n th√†nh c√¥ng" });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "L·ªói server khi x√≥a t√†i kho·∫£n" });
  }
};
